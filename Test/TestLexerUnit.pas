unit TestLexerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Classes, ReaderUnit, LexerUnit, TokenUnit;

type
  // Test methods for class TReader

  TestTLexer = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestScanTokens;
    procedure TestMultiLineComment;
    procedure TestSingleLineComment;
  end;

implementation

procedure TestTLexer.SetUp;
begin
end;

procedure TestTLexer.TearDown;
begin

end;

procedure TestTLexer.TestMultiLineComment;
var
  Reader: TReader;
  Lexer: TLexer;
begin
  Reader := TReader.Create('+-/*!' + sLineBreak + 'nd@#$%^*/<=', itPrompt);
  Lexer := TLexer.Create(Reader);
  try
    CheckTrue(Lexer.Tokens[0].TokenType = ttPlus);
    CheckTrue(Lexer.Tokens[1].TokenType = ttMinus);
    CheckTrue(Lexer.Tokens[2].TokenType = ttLE);  // <=
    CheckTrue(Lexer.Tokens[3].TokenType = ttEOF);
  finally
    FreeAndNil(Reader);
    FreeAndNil(Lexer);
  end;
end;

procedure TestTLexer.TestSingleLineComment;
var
  Reader: TReader;
  Lexer: TLexer;
begin
  Reader := TReader.Create('+-//!/*' + sLineBreak + '<=', itPrompt);
  Lexer := TLexer.Create(Reader);
  try
    CheckTrue(Lexer.Tokens[0].TokenType = ttPlus);
    CheckTrue(Lexer.Tokens[1].TokenType = ttMinus);
    CheckTrue(Lexer.Tokens[2].TokenType = ttLE);  // <=
    CheckTrue(Lexer.Tokens[3].TokenType = ttEOF);
  finally
    FreeAndNil(Reader);
    FreeAndNil(Lexer);
  end;
end;

procedure TestTLexer.TestScanTokens;
var
  Reader: TReader;
  Lexer: TLexer;
begin
  Reader := TReader.Create('+-!<=', itPrompt);
  Lexer := TLexer.Create(Reader);
  try
    CheckTrue(Lexer.Tokens[0].TokenType = ttPlus);
    CheckTrue(Lexer.Tokens[1].TokenType = ttMinus);
    CheckTrue(Lexer.Tokens[2].TokenType = ttNot); // !
    CheckTrue(Lexer.Tokens[3].TokenType = ttLE);  // <=
    CheckTrue(Lexer.Tokens[4].TokenType = ttEOF);
  finally
    FreeAndNil(Reader);
    FreeAndNil(Lexer);
  end;
end;



initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLexer.Suite);
end.

